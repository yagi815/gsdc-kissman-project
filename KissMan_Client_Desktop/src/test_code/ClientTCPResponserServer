#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <time.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <netdb.h>
#include <pthread.h>

void *listenToClient();
char *trim(char *str);
void sendMessageToClient(char *ip, int *port, char *message);

#define HELLO_PORT 6789
#define HELLO_GROUP "228.5.6.7"
#define MSGBUFSIZE 256
char *ClientIP = "localhost";
char *HostIP = "192.168.164.138";
int isRunning = 1;
main(int argc, char *argv[])
{   
pthread_t thread;
int th;
th = pthread_create( &thread, NULL, listenToClient, NULL);
pthread_join( thread, NULL);    
exit(0);
}

 void *listenToClient(){
 struct sockaddr_in addr;
 int fd, nbytes,addrlen;
 struct ip_mreq mreq;
 char msgbuf[MSGBUFSIZE];

 u_int yes=1;                

 /* create what looks like an ordinary UDP socket */
 if ((fd=socket(AF_INET,SOCK_DGRAM,0)) < 0) {
  perror("socket");
  exit(1);
 }

/* allow multiple sockets to use the same PORT number */
if (setsockopt(fd,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(yes)) < 0) {
   perror("Reusing ADDR failed");
   exit(1);
   }

 /* set up destination address */
 memset(&addr,0,sizeof(addr));
 addr.sin_family=AF_INET;
 addr.sin_addr.s_addr=htonl(INADDR_ANY); 
 addr.sin_port=htons(HELLO_PORT);

 /* bind to receive address */
 if (bind(fd,(struct sockaddr *) &addr,sizeof(addr)) < 0) {
  perror("bind");
  exit(1);
 }

 /* use setsockopt() to request that the kernel join a multicast group */
 mreq.imr_multiaddr.s_addr=inet_addr(HELLO_GROUP);
 mreq.imr_interface.s_addr=htonl(INADDR_ANY);

 if (setsockopt(fd,IPPROTO_IP,IP_ADD_MEMBERSHIP,&mreq,sizeof(mreq)) < 0) {
  perror("setsockopt");
  exit(1);
     }

do {     
  addrlen=sizeof(addr);
  if ((nbytes=recvfrom(fd,msgbuf,MSGBUFSIZE,0,(struct sockaddr *) &addr,&addrlen)) < 0) {
       perror("recvfrom");
       exit(1);
  }
  puts(msgbuf);
      char message[] = "FindIP:192.168.164.138 (Some IP)\n");    
  printf("\nSending Message To Client: %s\n", message);
      sendMessageToClient(ClientIP, 8888, message);
}while(isRunning==1);
close(fd);
}

  /**Sends the messages to the remote machine
  * ip = Address of the machine where message has to sent
  * port = port used for sending the message
  * message= string message
  *
  */
  void sendMessageToClient(char *ip, int *port, char *message) {
int sockfd, portno, n;
struct sockaddr_in serv_addr;
struct hostent *server;

char buffer[256];

portno = port;
sockfd = socket(AF_INET, SOCK_STREAM, 0);
if (sockfd < 0)
    error("ERROR opening socket");
server = gethostbyname(ip);
if (server == NULL) {
    fprintf(stderr, "ERROR, no such host\n");
    exit(0);
}
bzero((char *) &serv_addr, sizeof(serv_addr));
serv_addr.sin_family = AF_INET;
bcopy((char *) server->h_addr, (char *) &serv_addr.sin_addr.s_addr,
        server->h_length);
serv_addr.sin_port = htons(portno);
if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
    error("ERROR connecting");
bzero(buffer, 256);
strcpy(buffer,message);

n = send(sockfd, buffer, strlen(buffer), 0);
if (n < 0)
    error("ERROR writing to socket");
bzero(buffer, 256);
close(sockfd);
return 0;
    }
